type Edge {
  startNode: Node
  stopNode: Node
  startTime: String
  stopTime: String
  bikeID: String
  userType: String
  birthYear: String
  gender: String
  id: ID
}

input EdgeFilterParameter {
  startNode: NodeFilterParameter
  stopNode: NodeFilterParameter
  startTime: StringOperators
  stopTime: StringOperators
  bikeID: StringOperators
  userType: StringOperators
  birthYear: StringOperators
  gender: StringOperators
}

input EdgeSortParameter {
  startNode: NodeSortParameter
  stopNode: NodeSortParameter
  startTime: SortOrder
  stopTime: SortOrder
  bikeID: SortOrder
  userType: SortOrder
  birthYear: SortOrder
  gender: SortOrder
}

type EdgeUpdateResponse {
  success: Boolean
  message: String
  edge: Edge
}

type Mutation {
  CreateEdge(startNode: NodeInput, stopNode: NodeInput, startTime: String, stopTime: String, bikeID: String, userType: String, birthYear: String, gender: String): EdgeUpdateResponse
  UpdateEdge(startNode: NodeInput, stopNode: NodeInput, startTime: String, stopTime: String, bikeID: String, userType: String, birthYear: String, gender: String): EdgeUpdateResponse
  DeleteEdge(id: ID!): EdgeUpdateResponse
  CreateNode(id: ID, latitude: String, longitude: String, name: String): NodeUpdateResponse
  UpdateNode(id: ID!, latitude: String, longitude: String, name: String): NodeUpdateResponse
  DeleteNode(id: ID!): NodeUpdateResponse
}

type Node {
  id: ID
  latitude: String
  longitude: String
  name: String
}

input NodeFilterParameter {
  id: StringOperators
  latitude: StringOperators
  longitude: StringOperators
  name: StringOperators
}

input NodeInput {
  id: ID
  latitude: String
  longitude: String
  name: String
}

input NodeSortParameter {
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  name: SortOrder
}

type NodeUpdateResponse {
  success: Boolean
  message: String
  node: Node
}

type Query {
  Node(id: String!): Node
  Edge(id: String!): Edge
  Nodes(sort: NodeSortParameter, filter: NodeFilterParameter, limit: Int): [Node]
  Edges(sort: EdgeSortParameter, filter: EdgeFilterParameter, limit: Int): [Edge]
  Paths(length: Int!, startNodeID: String, stopNodeID: String, limit: Int): [[Edge]]
}

enum SortOrder {
  ASC
  DESC
}

input StringOperators {
  eq: String
  contains: String
  gt: String
  lt: String
}
