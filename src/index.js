const typeDefs = require('./graphql-schema').typeDefs;
const ApolloServer = require('apollo-server-express').ApolloServer;
const express = require('express');
const neo4j = require('neo4j-driver').v1;
const makeAugmentedSchema = require('neo4j-graphql-js').makeAugmentedSchema;
const dotenv = require('dotenv');

// set environment variables from ../.env
dotenv.config();

const app = express();

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const resolvers = {
  Query: {
    async Edge(obj, params, ctx, resolveInfo) {
      let session = ctx.driver.session();
      let result = await session.run('MATCH p=(p1:Node)-[e:EDGE]->(p2:Node) RETURN p');

      return result.records.map(record => record._fields[0].segments[0]);
    },
  },
  Edge: {
    startNode(obj, params, ctx, resolveInfo) {
      return obj.start.properties;
    },
    stopNode(obj, params, ctx, resolveInfo) {
      return obj.end.properties;
    },
    startTime(obj, params, ctx, resolveInfo) {
      return obj.relationship.properties['startTime'];
    },
    stopTime(obj, params, ctx, resolveInfo) {
      return obj.relationship.properties['stopTime'];
    },
    bikeID(obj, params, ctx, resolveInfo) {
      return obj.relationship.properties['bikeID'];
    },
    userType(obj, params, ctx, resolveInfo) {
      return obj.relationship.properties['userType'];
    },
    gender(obj, params, ctx, resolveInfo) {
      return obj.relationship.properties['gender'];
    },
    birthYear(obj, params, ctx, resolveInfo) {
      return obj.relationship.properties['birthYear'];
    },
  },
};

const schema = makeAugmentedSchema({
  typeDefs,
  resolvers,
});

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  process.env.NEO4J_URI || 'bolt://localhost:7687',
  neo4j.auth.basic(process.env.NEO4J_USER || 'neo4j', process.env.NEO4J_PASSWORD || 'neo4j'),
);

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
  context: { driver },
  schema: schema,
  introspection: true,
  playground: true,
});

// Specify port and path for GraphQL endpoint
const port = process.env.GRAPHQL_LISTEN_PORT || 4001;
const path = '/graphql';

/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */
server.applyMiddleware({ app, path });

app.listen({ port, path }, () => {
  // eslint-disable-next-line
  console.log(`GraphQL server ready at http://localhost:${port}${path}`);
});
