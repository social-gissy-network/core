const ApolloServer = require('apollo-server-express').ApolloServer;
const express = require('express');
const neo4j = require('neo4j-driver').v1;
const {makeAugmentedSchema} = require('neo4j-graphql-js');
const dotenv = require('dotenv');

// set environment variables from ../.env
dotenv.config();

const app = express();

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const {fieldsMapping} =  require("./consts");

let resolvers = {
  Query: {
    async Edge(obj, params, ctx, resolveInfo) {
      let db = ctx.db;
      let result = await db.getAllEdges();
      return result.records.map(record => result.records[0].toObject().p.segments[0]);
    }
  },
  Edge: {
    startNode(obj, params, ctx, resolveInfo) {
      return obj.start.properties;
    },
    stopNode(obj, params, ctx, resolveInfo) {
      return obj.end.properties;
    }
  },
  Mutation: {
    async CreateEdge(obj, params, ctx, resolveInfo) {
      let db = ctx.db;
      let startNode = params.startNode;
      let stopNode = params.stopNode;
      delete params.startNode;
      delete params.stopNode;

      // everything else is edgeInfo
      let edgeInfo = params;

      let result = {
        start: {
          properties: await db.insertNode(startNode)
        },
        end: {
          properties: await db.insertNode(stopNode)
        },
        relationship: {
          properties: await db.insertEdge(startNode, stopNode, edgeInfo)
        },
      };

      return result;
    }
  }
};


for (const edgeProperty of fieldsMapping.edgeInfo) {
  resolvers.Edge[edgeProperty.name] = (obj, params, ctx, resolveInfo) => {
    return obj.relationship.properties[edgeProperty.name]
  };
}

const typeDefs = require('./graphql-schema').typeDefs;

const schema = makeAugmentedSchema({
  typeDefs,
  resolvers,
});

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const db = require("./neo4j.js");
db.init();

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
  context: { db },
  schema: schema,
  introspection: true,
  playground: true,
});

// Specify port and path for GraphQL endpoint
const port = process.env.GRAPHQL_LISTEN_PORT || 4001;
const path = '/graphql';

/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */
server.applyMiddleware({ app, path });

app.listen({ port, path }, () => {
  // eslint-disable-next-line
  console.log(`GraphQL server ready at http://localhost:${port}${path}`);
});
